{"version":3,"sources":["Clients/Client.js","Components/GameConfiguration/Form.jsx","Components/User/Form.jsx","Components/User/Show.jsx","Components/Match/Form.jsx","Components/Messages/Show.jsx","Components/Messages/Form.jsx","Components/Match/Show.jsx","Components/MatchTable/MatchTable.jsx","Components/Amalgamation.jsx","Components/Header/Header.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["axios","defaults","headers","post","Client","users","baseURL","localStorage","getItem","get","getUser","id","deleteUser","delete","createUser","data","login","name","match","matches","pageNum","createMatch","joinMatch","patch","gameConfiguration","gameConfigurations","createGameConfigurations","messages","createMessage","play","player_id","game_input","determineWinner","player1moves","player2moves","items","victor","forEach","player1move","index","player2move","player1moveIndex","indexOf","player2moveIndex","length","isGameOver","num_matches","ConfigForm","props","onChange","e","target","type","setState","parseInt","value","onSubmit","preventDefault","console","log","state","then","response","redirect","catch","input_set","this","to","Form","Input","placeholder","Button","color","React","Component","UserForm","clearForm","setItem","url","updateName","loggedIn","error","alert","className","Show","user","MatchForm","onChange2","setPageNumber","pageNumber","pageInput","configurations","configurationId","input_set_1","input_set_2","user1_id","userId","game_configuration_id","updateCurrentMatch","push","key","onClick","entries","Table","Messages","getMessages","user_ids","Set","map","message","user_id","getUserNames","timeoutId","setTimeout","set","Map","clearTimeout","ListGroup","ListGroupItem","Badge","content","MessageForm","match_id","getMatch","matchId","trim","split","matchData","numMoves","Math","min","username1","user1","username2","user2","user2_id","userName","selectedMove","finalScore","playMove","lastPlayedMove","i","winBanner","style","paddingBottom","margin","width","item","marginBottom","MatchTable","getMatches","configuration_ids","element","sortedMatches","sort","a","b","order","itemsMine","itemsOther","game_configuration","Amalgamation","Header","Navbar","light","expand","NavbarBrand","fontSize","Nav","navbar","NavItem","paddingRight","App","currentMatchId","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a29192f.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nclass Client {\n  static users = () => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(\"/users\");\n  };\n  static getUser = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/users/${id}`);\n  };\n  static deleteUser = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.delete(`/users/${id}`);\n  };\n  static createUser = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/users\", data);\n  };\n  static login = name => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/login\", { name });\n  }\n  static match = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/matches/${id}`);\n  };\n  static matches = (pageNum) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/matches/?page=${pageNum}`);\n  };\n  static createMatch = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/matches\", data);\n  };\n  static joinMatch = (id, data) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.patch(`/matches/${id}/join`, data)\n  }\n  static gameConfiguration = (id) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/game_configurations/${id}`);\n  };\n  static gameConfigurations = (pageNum) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/game_configurations/?page=${pageNum}`);\n  };\n  static gameConfiguration = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/game_configurations/${id}`);\n  };\n  static createGameConfigurations = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/game_configurations\", data);\n  };\n  static messages = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/matches/${id}/messages`);\n  };\n  static createMessage = (id, data) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(`/matches/${id}/messages`, data);\n  };\n  static play = (id, player_id, game_input) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.patch(`/matches/${id}/play`, {\n      player_id,\n      game_input\n    })\n  }\n  static determineWinner = (player1moves, player2moves, items) => {\n      let victor = 0;\n      player1moves.forEach((player1move, index) => {\n          const player2move = player2moves[index];\n          const player1moveIndex = items.indexOf(player1move);\n          const player2moveIndex = items.indexOf(player2move);\n          if ((player1moveIndex + 1)%items.length === player2moveIndex) {\n              victor--;\n          } else if ((player2moveIndex + 1)%items.length === player1moveIndex) {\n              victor++;\n          }\n      });\n      return victor;\n  }\n  static isGameOver = (player1moves, player2moves, num_matches) => {\n      return (player1moves.length === num_matches && player2moves.length === num_matches);\n  }\n}\n\nexport default Client;\n","import React from 'react';\nimport { Form, Button, Input } from 'reactstrap';\nimport { Redirect } from \"react-router-dom\";\nimport Client from \"../../Clients/Client\";\n\nclass ConfigForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: '',\n        num_matches: 0,\n        input_set: '',\n        redirect: false\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === 'number') {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    Client.createGameConfigurations(this.state)\n      .then(response => {\n        this.setState({ redirect: true})\n        console.log(response);\n      })\n      .catch(console.log);\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.redirect ? <Redirect to='/matches' /> : null}\n        <h2>Create Configuration</h2>\n        <p>Input set must be a list of the inputs that can be used for the game, separated by spaces. Ex: \"rock paper scissors bazooka\". Every input beats the input directly before it, and loses to the input directly after it (in a loop). In the example above, paper beats rock, scissors beats paper, bazooka beats scissors, and rock beats bazooka.</p>\n        <Form onSubmit={this.onSubmit}>\n          <Input name='name' placeholder='name' onChange={this.onChange}></Input>\n          <br />\n          <Input\n            name='num_matches'\n            type='number'\n            placeholder='number of matches'\n            onChange={this.onChange}\n          ></Input>\n          <br />\n          <Input\n            name='input_set'\n            placeholder='input set'\n            onChange={this.onChange}\n          ></Input>\n          <br />\n          <Button type='submit' color='primary'>\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n}\n\nexport default ConfigForm;\n","import React from \"react\";\nimport \"./Form.css\";\nimport { Form, Button, Input } from \"reactstrap\";\nimport Client from \"../../Clients/Client\";\nimport {\n  Redirect\n} from \"react-router-dom\";\n\nclass UserForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: \"\",\n        loggedIn: false,\n        url: \"http://app1t3microdbt3micro.2iscm2mqr5.us-west-2.elasticbeanstalk.com/\"\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === \"number\") {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  clearForm = () => {\n    this.setState({ name: \"\" });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    localStorage.setItem(\"url\", this.state.url);\n    Client.login(this.state.name)\n      .then(response => {\n        this.props.updateName(this.state.name, response.data.id);\n        this.clearForm();\n        this.setState({ loggedIn: true });\n\n      })\n      .catch(error => {\n        alert(\"Shouldn't be possible to get there\")\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n          {this.state.loggedIn ? <Redirect to='/matches' /> : null}\n          <h2>Login</h2>\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              name=\"name\"\n              placeholder=\"name\"\n              onChange={this.onChange}\n              value={this.state.name}\n            ></Input>\n            <br />\n            <Input\n              name=\"url\"\n              placeholder=\"url\"\n              onChange={this.onChange}\n              value={this.state.url}\n            ></Input>\n            <br />\n            <Button type=\"submit\" color=\"primary\">\n              Submit\n            </Button>\n          </Form>\n      </div>\n    );\n  }\n}\n\nexport default UserForm;\n","import React from 'react';\n\nfunction Show(props) {\n  let user = props.user;\n  return (\n    <div>\n      <p>Name: {user.name}</p>\n    </div>\n  );\n}\n\nexport default Show;\n","import React from \"react\";\nimport Client from \"../../Clients/Client\";\nimport { Button, Input, Table } from \"reactstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nclass MatchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configurations: [],\n      redirect: false,\n      pageNumber: 1,\n      pageInput: 1\n    };\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: parseInt(e.target.value) });\n  };\n\n  onChange2 = e => {\n    if (e.target.type === \"number\") {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  setPageNumber = () => {\n      this.setState({ pageNumber: this.state.pageInput})\n      Client.gameConfigurations(this.state.pageInput)\n        .then(response => {\n          console.log(response)\n          this.setState({\n            configurations: response.data,\n          })\n        })\n        .catch(console.log);\n  }\n\n  onSubmit = (configurationId) => {\n    console.log(this.state);\n    let data = {\n      input_set_1: \"\",\n      input_set_2: \"\",\n      user1_id: this.props.userId,\n      game_configuration_id: configurationId,\n    }\n\n    Client.createMatch(data)\n      .then(response => {\n        this.props.updateCurrentMatch(response.data.match.id)\n        this.setState({ redirect: true})\n      })\n      .catch(console.log)\n  };\n\n  componentDidMount() {\n    Client.gameConfigurations(this.state.pageNumber)\n      .then(response => {\n        console.log(response)\n        this.setState({\n          configurations: response.data,\n        })\n      })\n      .catch(console.log);\n  }\n\n  render() {\n\n    const configurations = []\n    for (const [index, value] of this.state.configurations.entries()) {\n        configurations.push(\n            <tr key={index}>\n                <td>{value.name}</td>\n                <td><Button className=\"button\" type=\"submit\" color=\"primary\" onClick={() => {this.onSubmit(value.id)}}>Create</Button></td>\n            </tr>\n        )\n    }\n\n    return (\n      <>\n        {this.state.redirect ? <Redirect to='/match' /> : null}\n        <h2>Create Match</h2>\n        <div className=\"pageNumber\">\n            <h3>Page</h3>\n            <Input\n              name=\"pageInput\"\n              onChange={this.onChange2}\n              value={this.state.pageInput}\n              className=\"myInput\"\n            />\n            <Button className='myButton' type=\"submit\" color=\"primary\" onClick={this.setPageNumber}>\n              Submit\n            </Button>\n        </div>\n        <div>\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Configuration</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {configurations}\n                </tbody>\n            </Table>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MatchForm;\n","import React from 'react';\nimport { Badge, ListGroup, ListGroupItem } from 'reactstrap';\nimport Client from \"../../Clients/Client\";\n\nclass Messages extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        id: this.props.id,\n        messages: [],\n        users: new Map()\n    };\n  }\n\n  componentDidMount() {\n    this.getMessages();\n  }\n\n  componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n  }\n\n  getMessages = () => {\n      Client.messages(this.state.id)\n        .then(response => {\n            console.log(response);\n            const user_ids = [...new Set(response.data.map(message => message.user_id))];\n            this.setState({ messages: response.data });\n            this.getUserNames(user_ids);\n        })\n        .catch(console.log);\n      this.timeoutId = setTimeout(this.getMessages, 2000);\n  };\n\n  getUserNames = (user_ids) => {\n    user_ids.forEach(user_id => {\n        if (!(this.state.users.get(user_id))) {\n            Client.getUser(user_id)\n                .then(response => {\n                    const { users } = this.state;\n                    console.log(response);\n                    users.set(user_id, response.data.name);\n                    this.setState({ users });\n                })\n                .catch(console.log);\n        }\n    });\n  };\n\n  render() {\n    return (\n        <div>\n          <ListGroup>\n            <ListGroupItem color=\"primary\">Messages</ListGroupItem>\n                {this.state.messages.map((message, index) => {\n                    return (\n                        <ListGroupItem key={message.id}>\n                            <Badge>{this.state.users.get(message.user_id)}</Badge>: {message.content}\n                        </ListGroupItem>\n                    );\n                })}\n          </ListGroup>\n        </div>\n    );\n  }\n}\n\nexport default Messages;\n","import React from 'react';\nimport { Form, Button, Input } from 'reactstrap';\nimport Client from \"../../Clients/Client\";\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        match_id: this.props.match_id,\n        user_id: this.props.user_id,\n        content: ''\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === \"number\") {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  clearForm = () => {\n    this.setState({ content: \"\" });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    const message = {\n        content: this.state.content,\n        user_id: this.state.user_id,\n        match_id: this.state.match_id\n    };\n    Client.createMessage(this.state.id, message)\n      .then(response => {\n        this.clearForm();\n      })\n      .catch(console.log);\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Input name='content' placeholder='message' value={this.state.content} onChange={this.onChange}></Input>\n        <br />\n        <Button type='submit' color='primary'>\n          Send\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default MessageForm;\n","import React from 'react';\nimport Client from \"../../Clients/Client\";\nimport Messages from \"../Messages/Show\";\nimport MessageForm from \"../Messages/Form\";\nimport { Form, Button, Input } from \"reactstrap\";\nimport { Table } from 'reactstrap'\n\nclass Show extends React.Component {\n  \tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmatchData: {},\n\t\t\tplayer1moves: [],\n\t\t\tplayer2moves: [],\n            numMoves: 0,\n            input_set: [],\n            selectedMove: \"\",\n            username1: \"\",\n            username2: \"\",\n            gameConfiguration: {},\n            finalScore: 0,\n            isGameOver: false,\n            lastPlayedMove: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n        this.getMatch();\n    }\n\n\tgetMatch = () => {\n        Client.match(this.props.matchId)\n            .then(response => {\n                let player1moves = response.data.match.input_set_1 ? response.data.match.input_set_1.trim().split(\" \") : [];\n                let player2moves = response.data.match.input_set_2 ? response.data.match.input_set_2.trim().split(\" \") : [];\n                this.setState({\n\t\t\t\t\tmatchData: response.data.match,\n\t\t\t\t\tnumMoves: Math.min(player1moves.length, player2moves.length),\n\t\t\t\t\tplayer1moves,\n                    player2moves,\n                    username1: response.data.match.user1.name,\n                    username2: response.data.match.user2 ? response.data.match.user2.name : \"\",\n                });\n                if(response.data.match.user2_id == null && this.props.userId !== response.data.match.user1_id){\n                    let data = {\n                        user2_id: this.props.userId,\n                    }\n                    this.setState({ username2: this.props.userName });\n                    Client.joinMatch(response.data.match.id, data)\n                        .then(response => {\n                            console.log(response)\n                        })\n                }\n                if(this.state.input_set.length === 0) {\n                    Client.gameConfiguration(response.data.match.game_configuration_id)\n                    .then(response => {\n                        let input_set = response.data.input_set.trim().split(\" \")\n                        this.setState({\n                            input_set,\n                            selectedMove: input_set[0],\n                            gameConfiguration: response.data\n                        })\n                        console.log(response)\n                    })\n                }\n                if (Client.isGameOver(this.state.player1moves, this.state.player2moves, this.state.gameConfiguration.num_matches)) {\n                    const victor = Client.determineWinner(this.state.player1moves, this.state.player2moves, this.state.input_set);\n                    this.setState({\n                        finalScore: victor,\n                        isGameOver: true\n                    });\n                }\n            })\n            .catch(console.log);\n        setTimeout(this.getMatch, 2000);\n    };\n\n    playMove = e => {\n        e.preventDefault();\n        Client.play(this.props.matchId, this.props.userId, this.state.selectedMove)\n            .then(response => {\n                this.setState({ lastPlayedMove: this.state.selectedMove });\n            })\n            .catch(error => {\n                alert(error.response.data.error);\n            });\n    };\n\n    onChange = e => {\n          this.setState({ selectedMove: e.target.value });\n      };\n\n\trender() {\n\t\tconst items = []\n        for (let i = this.state.numMoves-1; i >= 0; i--) {\n            items.push(\n                <tr>\n                    <td>{i + 1}</td>\n                    <td>{this.state.player1moves[i]}</td>\n                    <td>{this.state.player2moves[i]}</td>\n                </tr>\n            )\n        }\n\n        let makeOption = item => {\n            return (\n              <option value={item}>\n                {item}\n              </option>\n            );\n          };\n\n        const winBanner = [];\n        if (this.state.finalScore > 0) {\n            winBanner.push(<h1>{this.state.username1} Won!</h1>);\n        } else if (this.state.finalScore < 0) {\n            winBanner.push(<h1>{this.state.username2} Won!</h1>);\n        } else {\n            winBanner.push(<h1>Draw!</h1>);\n        }\n\n\t\treturn (\n\t\t\t<div>\n                {this.state.isGameOver ? winBanner : null}\n                {this.state.username2 === \"\" ? <h2>Waiting for Player 2 to join...</h2> : null}\n                <h3>Configuration: {this.state.gameConfiguration.name} ({this.state.gameConfiguration.num_matches} matches)</h3>\n\t\t\t\t<Form style={{paddingBottom: '50px', margin: 'auto', width: '30%'}} onSubmit={this.playMove}>\n                    <h2>Play move</h2>\n                    <Input\n                        name=\"game_configuration_id\"\n                        type=\"select\"\n                        onChange={this.onChange}\n                    >\n                        {this.state.input_set.map(makeOption)}\n                    </Input>\n                    <br />\n                    <Button type=\"submit\" color=\"primary\">\n                        Submit Move\n                    </Button>\n                </Form>\n                <h4>Last submitted move: {this.state.lastPlayedMove}</h4>\n                <h2>Previous Moves</h2>\n\t\t\t\t<Table style={{marginBottom: '50px'}}>\n                    <thead>\n                        <tr>\n                            <th>Move</th>\n                            <th>{this.state.username1}</th>\n                            <th>{this.state.username2 === \"\" ? 'Player 2' : this.state.username2}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </Table>\n                <div style={{margin: 'auto', width: '50%'}}>\n                    <Messages id={this.props.matchId} />\n                    <MessageForm match_id={this.props.matchId} user_id={this.props.userId} />\n                </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Show;\n","import React from 'react';\nimport \"./MatchTable.css\"\nimport Client from \"../../Clients/Client\";\nimport { Button, Input, Table } from 'reactstrap'\nimport {\n  Redirect\n} from \"react-router-dom\";\n\nclass MatchTable extends React.Component{\n    constructor(props){\n            super(props)\n            this.state = {\n                matches: [],\n                redirect: false,\n                pageNumber: 1,\n                pageInput: 1\n            }\n    }\n\n    componentDidMount() {\n        this.getMatches()\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeoutId);\n    }\n\n    onChange = e => {\n      if (e.target.type === \"number\") {\n        this.setState({ [e.target.name]: parseInt(e.target.value) });\n      } else {\n        this.setState({ [e.target.name]: e.target.value });\n      }\n    };\n\n    getMatches = () => {\n        Client.matches(this.state.pageNumber)\n            .then(response => {\n                console.log(response);\n                const user_ids = []\n                const configuration_ids = [];\n                response.data.forEach(element => {\n                    configuration_ids.push(element.game_configuration_id);\n                    user_ids.push(element.user1_id)\n                    if(element.user2_id) {\n                        user_ids.push(element.user2_id)\n                    }\n                })\n                this.setState({ matches: response.data });\n            })\n            .catch(console.log);\n        this.timeoutId = setTimeout(this.getMatches, 2000);\n    };\n\n    onClick = (matchId) => {\n        this.props.updateCurrentMatch(matchId);\n        this.setState({ redirect: true });\n    };\n\n    setPageNumber = () => {\n        this.setState({ pageNumber: this.state.pageInput})\n    }\n\n    render() {\n        const sortedMatches = this.state.matches.sort(function(a, b) {\n            let order = 1;\n            if (a.user2_id === null && b.user2_id !== null) {\n                order = -1;\n            } else if (a.user2_id !== null && b.user2_id === null ) {\n                order = 1;\n            }\n            return order;\n        });\n        const itemsMine = []\n        const itemsOther = []\n        for (const [index, value] of sortedMatches.entries()) {\n            const player1moves = value.input_set_1 ? value.input_set_1.trim().split(\" \") : [];\n            const player2moves = value.input_set_2 ? value.input_set_2.trim().split(\" \") : [];\n            if (!Client.isGameOver(player1moves, player2moves, value.game_configuration.num_matches)) {\n                if(value.user1_id === this.props.userId || value.user2_id === this.props.userId){\n                    itemsMine.push(\n                        <tr key={index}>\n                            <td><Button className=\"button\" type=\"submit\" color=\"primary\" onClick={() => {this.onClick(value.id)}}>Resume</Button></td>\n                            <td>{value.user1.name}</td>\n                            <td>{value.user2 ? value.user2.name : \"\"}</td>\n                            <td>{value.game_configuration.name}</td>\n                        </tr>\n                    )\n                } else {\n                    itemsOther.push(\n                        <tr key={index}>\n                            <td><Button className=\"button\" type=\"submit\" color=\"primary\" onClick={() => {this.onClick(value.id)}}>{value.user2_id ? 'Spectate' : 'Join'}</Button></td>\n                            <td>{value.user1.name}</td>\n                            <td>{value.user2 ? value.user2.name : \"\"}</td>\n                            <td>{value.game_configuration.name}</td>\n                        </tr>\n                    )\n                }\n            }\n        }\n\n        return (\n            <div>\n                {this.state.redirect ? <Redirect to='/match' /> : null}\n                <div className=\"pageNumber\">\n                    <h3>Page</h3>\n                    <Input\n                      name=\"pageInput\"\n                      onChange={this.onChange}\n                      value={this.state.pageInput}\n                      className=\"myInput\"\n                    />\n                    <Button className='myButton' type=\"submit\" color=\"primary\" onClick={this.setPageNumber}>\n                      Submit\n                    </Button>\n                </div>\n                <h2>Your Current Matches</h2>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Join / Spectate</th>\n                            <th>Player 1</th>\n                            <th>Player 2</th>\n                            <th>Configuration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {itemsMine}\n                    </tbody>\n                </Table>\n                <h2>Other Current Matches</h2>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Join / Spectate</th>\n                            <th>Player 1</th>\n                            <th>Player 2</th>\n                            <th>Configuration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {itemsOther}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default MatchTable;\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nimport MatchTable from \"./MatchTable/MatchTable\"\n\nclass Amalgamation extends React.Component {\n\n    render() {\n        return (\n            <>\n                <Button style={{marginBottom: '50px'}} type=\"submit\" color=\"primary\">\n                    <Link style={{color: 'white'}} to=\"/config_creator\">Create a Configuration</Link>\n                </Button>\n                <br />\n                <Button style={{marginBottom: '50px'}} type=\"submit\" color=\"primary\">\n                    <Link style={{color: 'white'}} to=\"/create\">Create a Match</Link>\n                </Button>\n                <MatchTable\n                    updateCurrentMatch={this.props.updateCurrentMatch} userId={this.props.userId}\n                />\n            </>\n        )\n    }\n}\n\nexport default Amalgamation;\n","import React from 'react';\nimport \"./Header.css\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n\n    render() {\n      return (\n        <div className=\"header\">\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand style={{fontSize: '40px'}}>\n                <Link style={{color: 'black'}} to=\"/login\">\n                    RockPaperBazooka\n                </Link>\n            </NavbarBrand>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                    <Link style={{fontSize: '24px', paddingRight: '50px'}}to=\"/matches\">Matches</Link>\n                </NavItem>\n                <NavItem>\n                    <Link style={{fontSize: '24px', paddingRight: '50px'}}to=\"/user\">User</Link>\n                </NavItem>\n              </Nav>\n          </Navbar>\n        </div>\n      );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameConfigurationForm from \"./Components/GameConfiguration/Form\";\nimport UserForm from \"./Components/User/Form\";\nimport User from \"./Components/User/Show\";\nimport MatchForm from \"./Components/Match/Form\";\nimport Match from \"./Components/Match/Show\";\nimport Amalgamation from \"./Components/Amalgamation\"\nimport Header from \"./Components/Header/Header\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          name: \"\",\n          id: 2,\n          currentMatchId: 3\n      };\n  }\n\n  updateName = (name, id) => {\n      this.setState({\n        name,\n        id\n      });\n  };\n\n  updateCurrentMatch = (matchId) => {\n      this.setState({ currentMatchId: matchId });\n  };\n\n  render() {\n      return (\n        <Router>\n            <div className=\"App\">\n                <Header />\n                <Switch>\n                    <Route path=\"/config_creator\">\n                        <GameConfigurationForm /> <br />\n                    </Route>\n                    <Route path=\"/create\">\n                        <MatchForm\n                            userId={this.state.id}\n                            updateCurrentMatch={this.updateCurrentMatch}\n                        />\n                    </Route>\n                    <Route path=\"/match\">\n                        <Match matchId={this.state.currentMatchId} userId={this.state.id} userName={this.state.name} />\n                    </Route>\n                    <Route path=\"/matches\">\n                        <Amalgamation updateCurrentMatch={this.updateCurrentMatch} userId={this.state.id}/>\n                    </Route>\n                    <Route path=\"/user\">\n                        <User user={{ name: this.state.name }} />\n                    </Route>\n                    <Route path=\"/\">\n                        <UserForm updateName={this.updateName} />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}