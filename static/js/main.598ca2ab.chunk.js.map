{"version":3,"sources":["Clients/Client.js","Components/GameConfiguration/Form.jsx","Components/User/Form.jsx","Components/User/Show.jsx","Components/Match/Form.jsx","Components/Messages/Show.jsx","Components/Messages/Form.jsx","Components/Match/Show.jsx","Components/MatchTable/MatchTable.jsx","Components/Amalgamation.jsx","Components/Header/Header.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["axios","defaults","headers","post","Client","users","baseURL","localStorage","getItem","get","getUser","id","deleteUser","delete","createUser","data","login","name","match","matches","createMatch","joinMatch","patch","gameConfiguration","gameConfigurations","createGameConfigurations","messages","createMessage","play","player_id","game_input","determineWinner","player1moves","player2moves","items","victor","forEach","player1move","index","player2move","player1moveIndex","indexOf","player2moveIndex","length","isGameOver","game_configuration","num_matches","ConfigForm","props","onChange","e","target","type","setState","parseInt","value","onSubmit","preventDefault","console","log","state","then","response","redirect","catch","input_set","this","to","Form","Input","placeholder","Button","color","React","Component","UserForm","clearForm","setItem","url","updateName","loggedIn","error","alert","className","Show","user","MatchForm","input_set_1","input_set_2","user1_id","userId","game_configuration_id","updateCurrentMatch","configurations","map","configuration","key","Messages","getMessages","user_ids","Set","message","user_id","getUserNames","timeoutId","setTimeout","set","Map","clearTimeout","ListGroup","ListGroupItem","Badge","content","MessageForm","match_id","getMatch","matchId","trim","split","matchData","numMoves","Math","min","getUsernames","user2_id","username2","userName","selectedMove","finalScore","username1","playMove","lastPlayedMove","i","push","winBanner","style","paddingBottom","margin","width","item","Table","marginBottom","MatchTable","getMatches","configuration_ids","element","getConfigurations","configuration_id","onClick","sortedMatches","sort","a","b","order","itemsMine","itemsOther","entries","Amalgamation","Header","Navbar","light","expand","NavbarBrand","fontSize","Nav","navbar","NavItem","paddingRight","App","currentMatchId","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2YAEAA,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,mB,IACxCC,E,kCAAAA,EACGC,MAAQ,WAEb,OADEL,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAI,WAHfL,EAKGM,QAAU,SAAAC,GAEf,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAN,iBAAoBE,KAPzBP,EASGQ,WAAa,SAAAD,GAElB,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMa,OAAN,iBAAuBF,KAX5BP,EAaGU,WAAa,SAAAC,GAElB,OADEf,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMG,KAAK,SAAUY,IAf1BX,EAiBGY,MAAQ,SAAAC,GAEb,OADEjB,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMG,KAAK,SAAU,CAAEc,UAnB5Bb,EAqBGc,MAAQ,SAAAP,GAEb,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAN,mBAAsBE,KAvB3BP,EAyBGe,QAAU,WAEf,OADEnB,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAI,aA3BfL,EA6BGgB,YAAc,SAAAL,GAEnB,OADEf,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMG,KAAK,WAAYY,IA/B5BX,EAiCGiB,UAAY,SAACV,EAAII,GAEtB,OADEf,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMsB,MAAN,mBAAwBX,EAAxB,SAAmCI,IAnCxCX,EAqCGmB,kBAAoB,SAACZ,GAE1B,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAN,+BAAkCE,KAvCvCP,EAyCGoB,mBAAqB,WAE1B,OADExB,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAI,yBA3CfL,EA6CGmB,kBAAoB,SAAAZ,GAEzB,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAN,+BAAkCE,KA/CvCP,EAiDGqB,yBAA2B,SAAAV,GAEhC,OADEf,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMG,KAAK,uBAAwBY,IAnDxCX,EAqDGsB,SAAW,SAAAf,GAEhB,OADEX,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMS,IAAN,mBAAsBE,EAAtB,eAvDLP,EAyDGuB,cAAgB,SAAChB,EAAII,GAE1B,OADEf,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMG,KAAN,mBAAuBQ,EAAvB,aAAsCI,IA3D3CX,EA6DGwB,KAAO,SAACjB,EAAIkB,EAAWC,GAE5B,OADE9B,IAAMC,SAASK,QAAUC,aAAaC,QAAQ,OACzCR,IAAMsB,MAAN,mBAAwBX,EAAxB,SAAmC,CACxCkB,YACAC,gBAjEA1B,EAoEG2B,gBAAkB,SAACC,EAAcC,EAAcC,GAClD,IAAIC,EAAS,EAWb,OAVAH,EAAaI,SAAQ,SAACC,EAAaC,GAC/B,IAAMC,EAAcN,EAAaK,GAC3BE,EAAmBN,EAAMO,QAAQJ,GACjCK,EAAmBR,EAAMO,QAAQF,IAClCC,EAAmB,GAAGN,EAAMS,SAAWD,EACxCP,KACQO,EAAmB,GAAGR,EAAMS,SAAWH,GAC/CL,OAGDA,GAhFP/B,EAkFGwC,WAAa,SAACZ,EAAcC,EAAcY,GAC7C,OAAQb,EAAaW,SAAWE,EAAmBC,aAAeb,EAAaU,SAAWE,EAAmBC,aAIpG1C,QCxBA2C,E,YA5Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,SAAW,SAAAC,GACa,WAAlBA,EAAEC,OAAOC,KACX,EAAKC,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOqC,SAASJ,EAAEC,OAAOI,SAEnD,EAAKF,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOiC,EAAEC,OAAOI,SAd3B,EAkBnBC,SAAW,SAAAN,GACTA,EAAEO,iBACFC,QAAQC,IAAI,EAAKC,OACjBxD,EAAOqB,yBAAyB,EAAKmC,OAClCC,MAAK,SAAAC,GACJ,EAAKT,SAAS,CAAEU,UAAU,IAC1BL,QAAQC,IAAIG,MAEbE,MAAMN,QAAQC,MAxBjB,EAAKC,MAAQ,CACT3C,KAAM,GACN6B,YAAa,EACbmB,UAAW,GACXF,UAAU,GANG,E,sEA8BjB,OACE,oCACGG,KAAKN,MAAMG,SAAW,kBAAC,IAAD,CAAUI,GAAG,aAAgB,KACpD,oDACA,gXACA,kBAACC,EAAA,EAAD,CAAMZ,SAAUU,KAAKV,UACnB,kBAACa,EAAA,EAAD,CAAOpD,KAAK,OAAOqD,YAAY,OAAOrB,SAAUiB,KAAKjB,WACrD,6BACA,kBAACoB,EAAA,EAAD,CACEpD,KAAK,cACLmC,KAAK,SACLkB,YAAY,oBACZrB,SAAUiB,KAAKjB,WAEjB,6BACA,kBAACoB,EAAA,EAAD,CACEpD,KAAK,YACLqD,YAAY,YACZrB,SAAUiB,KAAKjB,WAEjB,6BACA,kBAACsB,EAAA,EAAD,CAAQnB,KAAK,SAASoB,MAAM,WAA5B,gB,GApDeC,IAAMC,WCsEhBC,G,kBAlEb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,SAAW,SAAAC,GACa,WAAlBA,EAAEC,OAAOC,KACX,EAAKC,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOqC,SAASJ,EAAEC,OAAOI,SAEnD,EAAKF,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOiC,EAAEC,OAAOI,SAb3B,EAiBnBqB,UAAY,WACV,EAAKvB,SAAS,CAAEpC,KAAM,MAlBL,EAqBnBuC,SAAW,SAAAN,GACTA,EAAEO,iBACFC,QAAQC,IAAI,EAAKC,OACjBrD,aAAasE,QAAQ,MAAO,EAAKjB,MAAMkB,KACvC1E,EAAOY,MAAM,EAAK4C,MAAM3C,MACrB4C,MAAK,SAAAC,GACJ,EAAKd,MAAM+B,WAAW,EAAKnB,MAAM3C,KAAM6C,EAAS/C,KAAKJ,IACrD,EAAKiE,YACL,EAAKvB,SAAS,CAAE2B,UAAU,OAG3BhB,OAAM,SAAAiB,GACLC,MAAM,0CA/BV,EAAKtB,MAAQ,CACT3C,KAAM,GACN+D,UAAU,EACVF,IAAK,0BALQ,E,sEAsCjB,OACE,yBAAKK,UAAU,QACVjB,KAAKN,MAAMoB,SAAW,kBAAC,IAAD,CAAUb,GAAG,aAAgB,KACpD,qCACA,kBAACC,EAAA,EAAD,CAAMZ,SAAUU,KAAKV,UACnB,kBAACa,EAAA,EAAD,CACEpD,KAAK,OACLqD,YAAY,OACZrB,SAAUiB,KAAKjB,SACfM,MAAOW,KAAKN,MAAM3C,OAEpB,6BACA,kBAACoD,EAAA,EAAD,CACEpD,KAAK,MACLqD,YAAY,MACZrB,SAAUiB,KAAKjB,SACfM,MAAOW,KAAKN,MAAMkB,MAEpB,6BACA,kBAACP,EAAA,EAAD,CAAQnB,KAAK,SAASoB,MAAM,WAA5B,gB,GA1DWC,IAAMC,YCGdU,MATf,SAAcpC,GACZ,IAAIqC,EAAOrC,EAAMqC,KACjB,OACE,6BACE,oCAAUA,EAAKpE,QC0ENqE,E,YA1Eb,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,SAAW,SAAAC,GACT,EAAKG,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOqC,SAASJ,EAAEC,OAAOI,UAVlC,EAanBC,SAAW,SAAAN,GACTA,EAAEO,iBACFC,QAAQC,IAAI,EAAKC,OACjB,IAAI7C,EAAO,CACTwE,YAAa,GACbC,YAAa,GACbC,SAAU,EAAKzC,MAAM0C,OACrBC,sBAAuB,EAAK/B,MAAM+B,uBAEpCvF,EAAOgB,YAAYL,GAChB8C,MAAK,SAAAC,GACJ,EAAKd,MAAM4C,mBAAmB9B,EAAS/C,KAAKJ,IAC5C,EAAK0C,SAAS,CAAEU,UAAU,OAE3BC,MAAMN,QAAQC,MAzBjB,EAAKC,MAAQ,CACX+B,sBAAuB,EACvBE,eAAgB,GAChB9B,UAAU,GALK,E,iFA8BE,IAAD,OAClB3D,EAAOoB,qBACJqC,MAAK,SAAAC,GACJJ,QAAQC,IAAIG,GACZ,EAAKT,SAAS,CACZwC,eAAgB/B,EAAS/C,UAG5BiD,MAAMN,QAAQC,O,+BAajB,OACE,oCACGO,KAAKN,MAAMG,SAAW,kBAAC,IAAD,CAAUI,GAAG,WAAc,KAClD,4CACA,kBAACC,EAAA,EAAD,CAAMZ,SAAUU,KAAKV,UACnB,uDACA,kBAACa,EAAA,EAAD,CACEpD,KAAK,wBACLmC,KAAK,SACLH,SAAUiB,KAAKjB,UAEdiB,KAAKN,MAAMiC,eAAeC,KAnBlB,SAAAC,GACf,OACE,4BAAQxC,MAAOwC,EAAcpF,GAAIqF,IAAKD,EAAcpF,IAApD,UACMoF,EAAc9E,KADpB,aAC6B8E,EAAcjD,YAD3C,kBAmBE,6BACA,kBAACyB,EAAA,EAAD,CAAQnB,KAAK,SAASoB,MAAM,WAA5B,gB,GAlEcC,IAAMC,W,gCC+DfuB,E,YA9Db,WAAYjD,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRkD,YAAc,WACV9F,EAAOsB,SAAS,EAAKkC,MAAMjD,IACxBkD,MAAK,SAAAC,GACFJ,QAAQC,IAAIG,GACZ,IAAMqC,EAAQ,YAAO,IAAIC,IAAItC,EAAS/C,KAAK+E,KAAI,SAAAO,GAAO,OAAIA,EAAQC,aAClE,EAAKjD,SAAS,CAAE3B,SAAUoC,EAAS/C,OACnC,EAAKwF,aAAaJ,MAErBnC,MAAMN,QAAQC,KACjB,EAAK6C,UAAYC,WAAW,EAAKP,YAAa,MA1B/B,EA6BnBK,aAAe,SAACJ,GACdA,EAAS/D,SAAQ,SAAAkE,GACP,EAAK1C,MAAMvD,MAAMI,IAAI6F,IACvBlG,EAAOM,QAAQ4F,GACVzC,MAAK,SAAAC,GAAa,IACPzD,EAAU,EAAKuD,MAAfvD,MACRqD,QAAQC,IAAIG,GACZzD,EAAMqG,IAAIJ,EAASxC,EAAS/C,KAAKE,MACjC,EAAKoC,SAAS,CAAEhD,aAEnB2D,MAAMN,QAAQC,SArC3B,EAAKC,MAAQ,CACTjD,GAAI,EAAKqC,MAAMrC,GACfe,SAAU,GACVrB,MAAO,IAAIsG,KALE,E,iFAUjBzC,KAAKgC,gB,6CAIHU,aAAa1C,KAAKsC,a,+BA8BZ,IAAD,OACP,OACI,6BACE,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAetC,MAAM,WAArB,YACKN,KAAKN,MAAMlC,SAASoE,KAAI,SAACO,EAAS/D,GAC/B,OACI,kBAACwE,EAAA,EAAD,CAAed,IAAKK,EAAQ1F,IACxB,kBAACoG,EAAA,EAAD,KAAQ,EAAKnD,MAAMvD,MAAMI,IAAI4F,EAAQC,UADzC,KAC6DD,EAAQW,kB,GAtDtEvC,IAAMC,WCkDduC,E,YAjDb,WAAYjE,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,SAAW,SAAAC,GACa,WAAlBA,EAAEC,OAAOC,KACX,EAAKC,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOqC,SAASJ,EAAEC,OAAOI,SAEnD,EAAKF,SAAL,eAAiBH,EAAEC,OAAOlC,KAAOiC,EAAEC,OAAOI,SAb3B,EAiBnBqB,UAAY,WACV,EAAKvB,SAAS,CAAE2D,QAAS,MAlBR,EAqBnBxD,SAAW,SAAAN,GACTA,EAAEO,iBACFC,QAAQC,IAAI,EAAKC,OACjB,IAAMyC,EAAU,CACZW,QAAS,EAAKpD,MAAMoD,QACpBV,QAAS,EAAK1C,MAAM0C,QACpBY,SAAU,EAAKtD,MAAMsD,UAEzB9G,EAAOuB,cAAc,EAAKiC,MAAMjD,GAAI0F,GACjCxC,MAAK,SAAAC,GACJ,EAAKc,eAENZ,MAAMN,QAAQC,MA/BjB,EAAKC,MAAQ,CACTsD,SAAU,EAAKlE,MAAMkE,SACrBZ,QAAS,EAAKtD,MAAMsD,QACpBU,QAAS,IALI,E,sEAqCjB,OACE,kBAAC5C,EAAA,EAAD,CAAMZ,SAAUU,KAAKV,UACnB,kBAACa,EAAA,EAAD,CAAOpD,KAAK,UAAUqD,YAAY,UAAUf,MAAOW,KAAKN,MAAMoD,QAAS/D,SAAUiB,KAAKjB,WACtF,6BACA,kBAACsB,EAAA,EAAD,CAAQnB,KAAK,SAASoB,MAAM,WAA5B,a,GA1CkBC,IAAMC,W,QCiLjBU,E,YA7KZ,WAAYpC,GAAO,IAAD,8BACnB,4CAAMA,KAqBPmE,SAAW,WACJ/G,EAAOc,MAAM,EAAK8B,MAAMoE,SACnBvD,MAAK,SAAAC,GACFJ,QAAQC,IAAIG,GACZ,IAAI9B,EAAe8B,EAAS/C,KAAKwE,YAAczB,EAAS/C,KAAKwE,YAAY8B,OAAOC,MAAM,KAAO,GACzFrF,EAAe6B,EAAS/C,KAAKyE,YAAc1B,EAAS/C,KAAKyE,YAAY6B,OAAOC,MAAM,KAAO,GAQ7F,GAPA,EAAKjE,SAAS,CACzBkE,UAAWzD,EAAS/C,KACpByG,SAAUC,KAAKC,IAAI1F,EAAaW,OAAQV,EAAaU,QACrDX,eACeC,iBAEJ,EAAK0F,eACwB,MAA1B7D,EAAS/C,KAAK6G,UAAoB,EAAK5E,MAAM0C,SAAW5B,EAAS/C,KAAK0E,SAAS,CAC9E,IAAI1E,EAAO,CACP6G,SAAU,EAAK5E,MAAM0C,QAEzB,EAAKrC,SAAS,CAAEwE,UAAW,EAAK7E,MAAM8E,WACtC1H,EAAOiB,UAAUyC,EAAS/C,KAAKJ,GAAII,GAC9B8C,MAAK,SAAAC,GACFJ,QAAQC,IAAIG,MAgBxB,GAbmC,IAAhC,EAAKF,MAAMK,UAAUtB,QACpBvC,EAAOmB,kBAAkBuC,EAAS/C,KAAK4E,uBACtC9B,MAAK,SAAAC,GACF,IAAIG,EAAYH,EAAS/C,KAAKkD,UAAUoD,OAAOC,MAAM,KACrD,EAAKjE,SAAS,CACVY,YACA8D,aAAc9D,EAAU,GACxB1C,kBAAmBuC,EAAS/C,OAEhC2C,QAAQC,IAAIG,MAIhB1D,EAAOwC,WAAW,EAAKgB,MAAM5B,aAAc,EAAK4B,MAAM3B,aAAc,EAAK2B,MAAMrC,mBAAoB,CACnG,IAAMY,EAAS/B,EAAO2B,gBAAgB,EAAK6B,MAAM5B,aAAc,EAAK4B,MAAM3B,aAAc,EAAK2B,MAAMK,WACnG,EAAKZ,SAAS,CACV2E,WAAY7F,EACZS,YAAY,QAIvBoB,MAAMN,QAAQC,KACnB8C,WAAW,EAAKU,SAAU,MAnEb,EAsEjBQ,aAAe,WACkB,KAAzB,EAAK/D,MAAMqE,WACX7H,EAAOM,QAAQ,EAAKkD,MAAM2D,UAAU9B,UAC/B5B,MAAK,SAAAC,GACF,EAAKT,SAAS,CAAE4E,UAAWnE,EAAS/C,KAAKE,UAE5C+C,MAAMN,QAAQC,KAEe,OAAlC,EAAKC,MAAM2D,UAAUK,UAA8C,KAAzB,EAAKhE,MAAMiE,WACrDzH,EAAOM,QAAQ,EAAKkD,MAAM2D,UAAUK,UAC/B/D,MAAK,SAAAC,GACF,EAAKT,SAAS,CAAEwE,UAAW/D,EAAS/C,KAAKE,UAE5C+C,MAAMN,QAAQC,MAnFV,EAuFjBuE,SAAW,SAAAhF,GACPA,EAAEO,iBACFrD,EAAOwB,KAAK,EAAKoB,MAAMoE,QAAS,EAAKpE,MAAM0C,OAAQ,EAAK9B,MAAMmE,cACzDlE,MAAK,SAAAC,GACF,EAAKT,SAAS,CAAE8E,eAAgB,EAAKvE,MAAMmE,kBAE9C/D,OAAM,SAAAiB,GACHC,MAAMD,EAAMnB,SAAS/C,KAAKkE,WA9FrB,EAkGjBhC,SAAW,SAAAC,GACL,EAAKG,SAAS,CAAE0E,aAAc7E,EAAEC,OAAOI,SAjG/C,EAAKK,MAAQ,CACZ2D,UAAW,GACXvF,aAAc,GACdC,aAAc,GACLuF,SAAU,EACVvD,UAAW,GACX8D,aAAc,GACdE,UAAW,GACXJ,UAAW,GACXtG,kBAAmB,GACnByG,WAAY,EACZpF,YAAY,EACZuF,eAAgB,IAdP,E,iFAmBbjE,KAAKiD,a,+BAqFL,IADN,IAAMjF,EAAQ,GACCkG,EAAIlE,KAAKN,MAAM4D,SAAS,EAAGY,GAAK,EAAGA,IACxClG,EAAMmG,KACF,4BACI,4BAAKD,EAAI,GACT,4BAAKlE,KAAKN,MAAM5B,aAAaoG,IAC7B,4BAAKlE,KAAKN,MAAM3B,aAAamG,MAKzC,IAQME,EAAY,GASxB,OARUpE,KAAKN,MAAMoE,WAAa,EACxBM,EAAUD,KAAK,4BAAKnE,KAAKN,MAAMqE,UAAhB,UACR/D,KAAKN,MAAMoE,WAAa,EAC/BM,EAAUD,KAAK,4BAAKnE,KAAKN,MAAMiE,UAAhB,UAEfS,EAAUD,KAAK,sCAIxB,6BACcnE,KAAKN,MAAMhB,WAAa0F,EAAY,KACX,KAAzBpE,KAAKN,MAAMiE,UAAmB,+DAA2C,KAC1E,8CAAoB3D,KAAKN,MAAMrC,kBAAkBN,KAAjD,KAAyDiD,KAAKN,MAAMrC,kBAAkBuB,YAAtF,aACZ,kBAACsB,EAAA,EAAD,CAAMmE,MAAO,CAACC,cAAe,OAAQC,OAAQ,OAAQC,MAAO,OAAQlF,SAAUU,KAAKgE,UACnE,yCACA,kBAAC7D,EAAA,EAAD,CACIpD,KAAK,wBACLmC,KAAK,SACLH,SAAUiB,KAAKjB,UAEdiB,KAAKN,MAAMK,UAAU6B,KA7BrB,SAAA6C,GACb,OACE,4BAAQpF,MAAOoF,GACZA,OA4BG,6BACA,kBAACpE,EAAA,EAAD,CAAQnB,KAAK,SAASoB,MAAM,WAA5B,gBAIJ,oDAA0BN,KAAKN,MAAMuE,gBACrC,8CACZ,kBAACS,EAAA,EAAD,CAAOL,MAAO,CAACM,aAAc,SACb,+BACI,4BACI,oCACA,4BAAK3E,KAAKN,MAAMqE,WAChB,4BAA8B,KAAzB/D,KAAKN,MAAMiE,UAAmB,WAAa3D,KAAKN,MAAMiE,aAGnE,+BACK3F,IAGT,yBAAKqG,MAAO,CAACE,OAAQ,OAAQC,MAAO,QAChC,kBAAC,EAAD,CAAU/H,GAAIuD,KAAKlB,MAAMoE,UACzB,kBAAC,EAAD,CAAaF,SAAUhD,KAAKlB,MAAMoE,QAASd,QAASpC,KAAKlB,MAAM0C,e,GAvKhEjB,IAAMC,W,gBCuJVoE,G,kBArJX,WAAY9F,GAAO,IAAD,8BACV,4CAAMA,KAiBd+F,WAAa,WACT3I,EAAOe,UACF0C,MAAK,SAAAC,GACFJ,QAAQC,IAAIG,GACZ,IAAMqC,EAAW,GACX6C,EAAoB,GAC1BlF,EAAS/C,KAAKqB,SAAQ,SAAA6G,GAClBD,EAAkBX,KAAKY,EAAQtD,uBAC/BQ,EAASkC,KAAKY,EAAQxD,UACnBwD,EAAQrB,UACPzB,EAASkC,KAAKY,EAAQrB,aAG9B,EAAKvE,SAAS,CAAElC,QAAS2C,EAAS/C,OAClC,EAAKwF,aAAaJ,GAClB,EAAK+C,kBAAkBF,MAE1BhF,MAAMN,QAAQC,KACnB,EAAK6C,UAAYC,WAAW,EAAKsC,WAAY,MApC/B,EAuClBxC,aAAe,SAACJ,GACZA,EAAS/D,SAAQ,SAAAkE,GACP,EAAK1C,MAAMvD,MAAMI,IAAI6F,IACvBlG,EAAOM,QAAQ4F,GACVzC,MAAK,SAAAC,GAAa,IACPzD,EAAU,EAAKuD,MAAfvD,MACRqD,QAAQC,IAAIG,GACZzD,EAAMqG,IAAIJ,EAASxC,EAAS/C,KAAKE,MACjC,EAAKoC,SAAS,CAAEhD,aAEnB2D,MAAMN,QAAQC,SAjDb,EAsDlBuF,kBAAoB,SAACF,GACjBA,EAAkB5G,SAAQ,SAAA+G,GAChB,EAAKvF,MAAMiC,eAAepF,IAAI0I,IAChC/I,EAAOmB,kBAAkB4H,GACpBtF,MAAK,SAAAC,GAAa,IACP+B,EAAmB,EAAKjC,MAAxBiC,eACRnC,QAAQC,IAAIG,GACZ+B,EAAea,IAAIyC,EAAkBrF,EAAS/C,MAC9C,EAAKsC,SAAS,CAAEwC,sBAEnB7B,MAAMN,QAAQC,SAhEb,EAqElByF,QAAU,SAAChC,GACP,EAAKpE,MAAM4C,mBAAmBwB,GAC9B,EAAK/D,SAAS,CAAEU,UAAU,KArEtB,EAAKH,MAAQ,CACTzC,QAAS,GACTd,MAAO,IAAIsG,IACX5C,UAAU,EACV8B,eAAgB,IAAIc,KANd,E,iFAWdzC,KAAK6E,e,6CAILnC,aAAa1C,KAAKsC,a,+BA2DZ,IAAD,OACC6C,EAAgBnF,KAAKN,MAAMzC,QAAQmI,MAAK,SAASC,EAAGC,GACtD,IAAIC,EAAQ,EAMZ,OALmB,OAAfF,EAAE3B,UAAoC,OAAf4B,EAAE5B,SACzB6B,GAAS,EACa,OAAfF,EAAE3B,UAAoC,OAAf4B,EAAE5B,WAChC6B,EAAQ,GAELA,KAELC,EAAY,GACZC,EAAa,GAXd,uBAYL,IAZK,IAYL,EAZK,2BAYOrH,GAZP,uBAYciB,EAZd,KAaKvB,EAAeuB,EAAMgC,YAAchC,EAAMgC,YAAY8B,OAAOC,MAAM,KAAO,GACzErF,EAAesB,EAAMiC,YAAcjC,EAAMiC,YAAY6B,OAAOC,MAAM,KAAO,GACzEvB,EAAgB,EAAKnC,MAAMiC,eAAepF,IAAI8C,EAAMoC,uBACtDI,IAAkB3F,EAAOwC,WAAWZ,EAAcC,EAAc8D,KAC7DxC,EAAMkC,WAAa,EAAKzC,MAAM0C,QAAUnC,EAAMqE,WAAa,EAAK5E,MAAM0C,OACrEgE,EAAUrB,KACN,wBAAIrC,IAAK1D,GACL,4BAAI,kBAACiC,EAAA,EAAD,CAAQY,UAAU,SAAS/B,KAAK,SAASoB,MAAM,UAAU4E,QAAS,WAAO,EAAKA,QAAQ7F,EAAM5C,MAA5F,WACJ,4BAAK,EAAKiD,MAAMvD,MAAMI,IAAI8C,EAAMkC,WAChC,4BAAK,EAAK7B,MAAMvD,MAAMI,IAAI8C,EAAMqE,WAChC,4BAAK7B,EAAgBA,EAAc9E,KAAO,QAIlD0I,EAAWtB,KACP,wBAAIrC,IAAK1D,GACL,4BAAI,kBAACiC,EAAA,EAAD,CAAQY,UAAU,SAAS/B,KAAK,SAASoB,MAAM,UAAU4E,QAAS,WAAO,EAAKA,QAAQ7F,EAAM5C,MAAO4C,EAAMqE,SAAW,WAAa,SACrI,4BAAK,EAAKhE,MAAMvD,MAAMI,IAAI8C,EAAMkC,WAChC,4BAAK,EAAK7B,MAAMvD,MAAMI,IAAI8C,EAAMqE,WAChC,4BAAK7B,EAAgBA,EAAc9E,KAAO,UApB9D,EAA6BoI,EAAcO,UAA3C,+CAAsD,CAAC,IAAD,OAZjD,kFAuCL,OACI,6BACK1F,KAAKN,MAAMG,SAAW,kBAAC,IAAD,CAAUI,GAAG,WAAc,KAClD,oDACA,kBAACyE,EAAA,EAAD,KACI,+BACI,4BACI,+CACA,wCACA,wCACA,+CAGR,+BACKc,IAGT,qDACA,kBAACd,EAAA,EAAD,KACI,+BACI,4BACI,+CACA,wCACA,wCACA,+CAGR,+BACKe,S,GA9IAlF,IAAMC,YCoBhBmF,E,iLAjBP,OACI,oCACI,kBAACtF,EAAA,EAAD,CAAQgE,MAAO,CAACM,aAAc,QAASzF,KAAK,SAASoB,MAAM,WACvD,kBAAC,IAAD,CAAM+D,MAAO,CAAC/D,MAAO,SAAUL,GAAG,mBAAlC,2BAEJ,6BACA,kBAACI,EAAA,EAAD,CAAQgE,MAAO,CAACM,aAAc,QAASzF,KAAK,SAASoB,MAAM,WACvD,kBAAC,IAAD,CAAM+D,MAAO,CAAC/D,MAAO,SAAUL,GAAG,WAAlC,mBAEJ,kBAAC,EAAD,CACIyB,mBAAoB1B,KAAKlB,MAAM4C,mBAAoBF,OAAQxB,KAAKlB,MAAM0C,c,GAb/DjB,IAAMC,W,wCC2BlBoF,E,iLAtBT,OACE,yBAAK3E,UAAU,UACb,kBAAC4E,EAAA,EAAD,CAAQvF,MAAM,QAAQwF,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAa3B,MAAO,CAAC4B,SAAU,SAC3B,kBAAC,IAAD,CAAM5B,MAAO,CAAC/D,MAAO,SAAUL,GAAG,UAAlC,qBAIF,kBAACiG,EAAA,EAAD,CAAKjF,UAAU,UAAUkF,QAAM,GAC7B,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAM/B,MAAO,CAAC4B,SAAU,OAAQI,aAAc,QAAQpG,GAAG,YAAzD,YAEJ,kBAACmG,EAAA,EAAD,KACI,kBAAC,IAAD,CAAM/B,MAAO,CAAC4B,SAAU,OAAQI,aAAc,QAAQpG,GAAG,SAAzD,gB,GAhBCM,IAAMC,WC6DZ8F,E,YAtDb,WAAYxH,GAAQ,IAAD,8BACf,4CAAMA,KAQV+B,WAAa,SAAC9D,EAAMN,GAChB,EAAK0C,SAAS,CACZpC,OACAN,QAZa,EAgBnBiF,mBAAqB,SAACwB,GAClB,EAAK/D,SAAS,CAAEoH,eAAgBrD,KAfhC,EAAKxD,MAAQ,CACT3C,KAAM,GACNN,GAAI,EACJ8J,eAAgB,GALL,E,sEAqBf,OACE,kBAAC,IAAD,KACI,yBAAKtF,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuF,KAAK,mBACR,kBAAC,EAAD,MADJ,IAC8B,8BAE9B,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,CACIhF,OAAQxB,KAAKN,MAAMjD,GACnBiF,mBAAoB1B,KAAK0B,sBAGjC,kBAAC,IAAD,CAAO8E,KAAK,UACR,kBAAC,EAAD,CAAOtD,QAASlD,KAAKN,MAAM6G,eAAgB/E,OAAQxB,KAAKN,MAAMjD,GAAImH,SAAU5D,KAAKN,MAAM3C,QAE3F,kBAAC,IAAD,CAAOyJ,KAAK,YACR,kBAAC,EAAD,CAAc9E,mBAAoB1B,KAAK0B,mBAAoBF,OAAQxB,KAAKN,MAAMjD,MAElF,kBAAC,IAAD,CAAO+J,KAAK,SACR,kBAAC,EAAD,CAAMrF,KAAM,CAAEpE,KAAMiD,KAAKN,MAAM3C,SAEnC,kBAAC,IAAD,CAAOyJ,KAAK,KACR,kBAAC,EAAD,CAAU3F,WAAYb,KAAKa,qB,GA/CjCN,IAAMC,WCHJiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5J,MACvB,2D,MCXN6J,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxH,MAAK,SAAAyH,GACjCA,EAAaC,kB","file":"static/js/main.598ca2ab.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nclass Client {\n  static users = () => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(\"/users\");\n  };\n  static getUser = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/users/${id}`);\n  };\n  static deleteUser = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.delete(`/users/${id}`);\n  };\n  static createUser = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/users\", data);\n  };\n  static login = name => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/login\", { name });\n  }\n  static match = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/matches/${id}`);\n  };\n  static matches = () => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(\"/matches\");\n  };\n  static createMatch = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/matches\", data);\n  };\n  static joinMatch = (id, data) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.patch(`/matches/${id}/join`, data)\n  }\n  static gameConfiguration = (id) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/game_configurations/${id}`);\n  };\n  static gameConfigurations = () => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(\"/game_configurations\");\n  };\n  static gameConfiguration = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/game_configurations/${id}`);\n  };\n  static createGameConfigurations = data => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(\"/game_configurations\", data);\n  };\n  static messages = id => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.get(`/matches/${id}/messages`);\n  };\n  static createMessage = (id, data) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.post(`/matches/${id}/messages`, data);\n  };\n  static play = (id, player_id, game_input) => {\n      axios.defaults.baseURL = localStorage.getItem(\"url\");\n    return axios.patch(`/matches/${id}/play`, {\n      player_id,\n      game_input\n    })\n  }\n  static determineWinner = (player1moves, player2moves, items) => {\n      let victor = 0;\n      player1moves.forEach((player1move, index) => {\n          const player2move = player2moves[index];\n          const player1moveIndex = items.indexOf(player1move);\n          const player2moveIndex = items.indexOf(player2move);\n          if ((player1moveIndex + 1)%items.length === player2moveIndex) {\n              victor--;\n          } else if ((player2moveIndex + 1)%items.length === player1moveIndex) {\n              victor++;\n          }\n      });\n      return victor;\n  }\n  static isGameOver = (player1moves, player2moves, game_configuration) => {\n      return (player1moves.length === game_configuration.num_matches && player2moves.length === game_configuration.num_matches);\n  }\n}\n\nexport default Client;\n","import React from 'react';\nimport { Form, Button, Input } from 'reactstrap';\nimport { Redirect } from \"react-router-dom\";\nimport Client from \"../../Clients/Client\";\n\nclass ConfigForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: '',\n        num_matches: 0,\n        input_set: '',\n        redirect: false\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === 'number') {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    Client.createGameConfigurations(this.state)\n      .then(response => {\n        this.setState({ redirect: true})\n        console.log(response);\n      })\n      .catch(console.log);\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.redirect ? <Redirect to='/matches' /> : null}\n        <h2>Create Configuration</h2>\n        <p>Input set must be a list of the inputs that can be used for the game, separated by spaces. Ex: \"rock paper scissors bazooka\". Every input beats the input directly before it, and loses to the input directly after it (in a loop). In the example above, paper beats rock, scissors beats paper, bazooka beats scissors, and rock beats bazooka.</p>\n        <Form onSubmit={this.onSubmit}>\n          <Input name='name' placeholder='name' onChange={this.onChange}></Input>\n          <br />\n          <Input\n            name='num_matches'\n            type='number'\n            placeholder='number of matches'\n            onChange={this.onChange}\n          ></Input>\n          <br />\n          <Input\n            name='input_set'\n            placeholder='input set'\n            onChange={this.onChange}\n          ></Input>\n          <br />\n          <Button type='submit' color='primary'>\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n}\n\nexport default ConfigForm;\n","import React from \"react\";\nimport \"./Form.css\";\nimport { Form, Button, Input } from \"reactstrap\";\nimport Client from \"../../Clients/Client\";\nimport {\n  Redirect\n} from \"react-router-dom\";\n\nclass UserForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: \"\",\n        loggedIn: false,\n        url: \"http://localhost:3000/\"\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === \"number\") {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  clearForm = () => {\n    this.setState({ name: \"\" });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    localStorage.setItem(\"url\", this.state.url);\n    Client.login(this.state.name)\n      .then(response => {\n        this.props.updateName(this.state.name, response.data.id);\n        this.clearForm();\n        this.setState({ loggedIn: true });\n\n      })\n      .catch(error => {\n        alert(\"Shouldn't be possible to get there\")\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n          {this.state.loggedIn ? <Redirect to='/matches' /> : null}\n          <h2>Login</h2>\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              name=\"name\"\n              placeholder=\"name\"\n              onChange={this.onChange}\n              value={this.state.name}\n            ></Input>\n            <br />\n            <Input\n              name=\"url\"\n              placeholder=\"url\"\n              onChange={this.onChange}\n              value={this.state.url}\n            ></Input>\n            <br />\n            <Button type=\"submit\" color=\"primary\">\n              Submit\n            </Button>\n          </Form>\n      </div>\n    );\n  }\n}\n\nexport default UserForm;\n","import React from 'react';\n\nfunction Show(props) {\n  let user = props.user;\n  return (\n    <div>\n      <p>Name: {user.name}</p>\n    </div>\n  );\n}\n\nexport default Show;\n","import React from \"react\";\nimport Client from \"../../Clients/Client\";\nimport { Form, Button, Input } from \"reactstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nclass MatchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game_configuration_id: 0,\n      configurations: [],\n      redirect: false\n    };\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.name]: parseInt(e.target.value) });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    let data = {\n      input_set_1: \"\",\n      input_set_2: \"\",\n      user1_id: this.props.userId,\n      game_configuration_id: this.state.game_configuration_id,\n    }\n    Client.createMatch(data)\n      .then(response => {\n        this.props.updateCurrentMatch(response.data.id)\n        this.setState({ redirect: true})\n      })\n      .catch(console.log)\n  };\n\n  componentDidMount() {\n    Client.gameConfigurations()\n      .then(response => {\n        console.log(response)\n        this.setState({\n          configurations: response.data\n        })\n      })\n      .catch(console.log);\n  }\n\n  render() {\n\n    let makeOption = configuration => {\n      return (\n        <option value={configuration.id} key={configuration.id}>\n          {`${configuration.name} (${configuration.num_matches} matches)`}\n        </option>\n      );\n    };\n\n    return (\n      <>\n        {this.state.redirect ? <Redirect to='/match' /> : null}\n        <h2>Create Match</h2>\n        <Form onSubmit={this.onSubmit}>\n          <h4>Select a configuration:</h4>\n          <Input\n            name=\"game_configuration_id\"\n            type=\"select\"\n            onChange={this.onChange}\n          >\n            {this.state.configurations.map(makeOption)}\n          </Input>\n          <br />\n          <Button type=\"submit\" color=\"primary\">\n            Submit\n          </Button>\n        </Form>\n      </>\n    );\n  }\n}\n\nexport default MatchForm;\n","import React from 'react';\nimport { Badge, ListGroup, ListGroupItem } from 'reactstrap';\nimport Client from \"../../Clients/Client\";\n\nclass Messages extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        id: this.props.id,\n        messages: [],\n        users: new Map()\n    };\n  }\n\n  componentDidMount() {\n    this.getMessages();\n  }\n\n  componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n  }\n\n  getMessages = () => {\n      Client.messages(this.state.id)\n        .then(response => {\n            console.log(response);\n            const user_ids = [...new Set(response.data.map(message => message.user_id))];\n            this.setState({ messages: response.data });\n            this.getUserNames(user_ids);\n        })\n        .catch(console.log);\n      this.timeoutId = setTimeout(this.getMessages, 2000);\n  };\n\n  getUserNames = (user_ids) => {\n    user_ids.forEach(user_id => {\n        if (!(this.state.users.get(user_id))) {\n            Client.getUser(user_id)\n                .then(response => {\n                    const { users } = this.state;\n                    console.log(response);\n                    users.set(user_id, response.data.name);\n                    this.setState({ users });\n                })\n                .catch(console.log);\n        }\n    });\n  };\n\n  render() {\n    return (\n        <div>\n          <ListGroup>\n            <ListGroupItem color=\"primary\">Messages</ListGroupItem>\n                {this.state.messages.map((message, index) => {\n                    return (\n                        <ListGroupItem key={message.id}>\n                            <Badge>{this.state.users.get(message.user_id)}</Badge>: {message.content}\n                        </ListGroupItem>\n                    );\n                })}\n          </ListGroup>\n        </div>\n    );\n  }\n}\n\nexport default Messages;\n","import React from 'react';\nimport { Form, Button, Input } from 'reactstrap';\nimport Client from \"../../Clients/Client\";\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        match_id: this.props.match_id,\n        user_id: this.props.user_id,\n        content: ''\n    };\n  }\n\n  onChange = e => {\n    if (e.target.type === \"number\") {\n      this.setState({ [e.target.name]: parseInt(e.target.value) });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  clearForm = () => {\n    this.setState({ content: \"\" });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n    const message = {\n        content: this.state.content,\n        user_id: this.state.user_id,\n        match_id: this.state.match_id\n    };\n    Client.createMessage(this.state.id, message)\n      .then(response => {\n        this.clearForm();\n      })\n      .catch(console.log);\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Input name='content' placeholder='message' value={this.state.content} onChange={this.onChange}></Input>\n        <br />\n        <Button type='submit' color='primary'>\n          Send\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default MessageForm;\n","import React from 'react';\nimport Client from \"../../Clients/Client\";\nimport Messages from \"../Messages/Show\";\nimport MessageForm from \"../Messages/Form\";\nimport { Form, Button, Input } from \"reactstrap\";\nimport { Table } from 'reactstrap'\n\nclass Show extends React.Component {\n  \tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmatchData: {},\n\t\t\tplayer1moves: [],\n\t\t\tplayer2moves: [],\n            numMoves: 0,\n            input_set: [],\n            selectedMove: \"\",\n            username1: \"\",\n            username2: \"\",\n            gameConfiguration: {},\n            finalScore: 0,\n            isGameOver: false,\n            lastPlayedMove: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n        this.getMatch();\n    }\n\n\tgetMatch = () => {\n        Client.match(this.props.matchId)\n            .then(response => {\n                console.log(response);\n                let player1moves = response.data.input_set_1 ? response.data.input_set_1.trim().split(\" \") : [];\n                let player2moves = response.data.input_set_2 ? response.data.input_set_2.trim().split(\" \") : [];\n                this.setState({\n\t\t\t\t\tmatchData: response.data,\n\t\t\t\t\tnumMoves: Math.min(player1moves.length, player2moves.length),\n\t\t\t\t\tplayer1moves,\n                    player2moves\n                });\n                this.getUsernames();\n                if(response.data.user2_id == null && this.props.userId !== response.data.user1_id){\n                    let data = {\n                        user2_id: this.props.userId,\n                    }\n                    this.setState({ username2: this.props.userName });\n                    Client.joinMatch(response.data.id, data)\n                        .then(response => {\n                            console.log(response)\n                        })\n                }\n                if(this.state.input_set.length === 0) {\n                    Client.gameConfiguration(response.data.game_configuration_id)\n                    .then(response => {\n                        let input_set = response.data.input_set.trim().split(\" \")\n                        this.setState({\n                            input_set,\n                            selectedMove: input_set[0],\n                            gameConfiguration: response.data\n                        })\n                        console.log(response)\n                    })\n                }\n                // this.getUserNames(user_ids)\n                if (Client.isGameOver(this.state.player1moves, this.state.player2moves, this.state.gameConfiguration)) {\n                    const victor = Client.determineWinner(this.state.player1moves, this.state.player2moves, this.state.input_set);\n                    this.setState({\n                        finalScore: victor,\n                        isGameOver: true\n                    });\n                }\n            })\n            .catch(console.log);\n        setTimeout(this.getMatch, 2000);\n    };\n\n    getUsernames = () => {\n        if (this.state.username1 === \"\") {\n            Client.getUser(this.state.matchData.user1_id)\n                .then(response => {\n                    this.setState({ username1: response.data.name })\n                })\n                .catch(console.log);\n        }\n        if (this.state.matchData.user2_id !== null && this.state.username2 === \"\") {\n            Client.getUser(this.state.matchData.user2_id)\n                .then(response => {\n                    this.setState({ username2: response.data.name });\n                })\n                .catch(console.log);\n        }\n    };\n\n    playMove = e => {\n        e.preventDefault();\n        Client.play(this.props.matchId, this.props.userId, this.state.selectedMove)\n            .then(response => {\n                this.setState({ lastPlayedMove: this.state.selectedMove });\n            })\n            .catch(error => {\n                alert(error.response.data.error);\n            });\n    };\n\n    onChange = e => {\n          this.setState({ selectedMove: e.target.value });\n      };\n\n\trender() {\n\t\tconst items = []\n        for (let i = this.state.numMoves-1; i >= 0; i--) {\n            items.push(\n                <tr>\n                    <td>{i + 1}</td>\n                    <td>{this.state.player1moves[i]}</td>\n                    <td>{this.state.player2moves[i]}</td>\n                </tr>\n            )\n        }\n\n        let makeOption = item => {\n            return (\n              <option value={item}>\n                {item}\n              </option>\n            );\n          };\n\n        const winBanner = [];\n        if (this.state.finalScore > 0) {\n            winBanner.push(<h1>{this.state.username1} Won!</h1>);\n        } else if (this.state.finalScore < 0) {\n            winBanner.push(<h1>{this.state.username2} Won!</h1>);\n        } else {\n            winBanner.push(<h1>Draw!</h1>);\n        }\n\n\t\treturn (\n\t\t\t<div>\n                {this.state.isGameOver ? winBanner : null}\n                {this.state.username2 === \"\" ? <h2>Waiting for Player 2 to join...</h2> : null}\n                <h3>Configuration: {this.state.gameConfiguration.name} ({this.state.gameConfiguration.num_matches} matches)</h3>\n\t\t\t\t<Form style={{paddingBottom: '50px', margin: 'auto', width: '30%'}} onSubmit={this.playMove}>\n                    <h2>Play move</h2>\n                    <Input\n                        name=\"game_configuration_id\"\n                        type=\"select\"\n                        onChange={this.onChange}\n                    >\n                        {this.state.input_set.map(makeOption)}\n                    </Input>\n                    <br />\n                    <Button type=\"submit\" color=\"primary\">\n                        Submit Move\n                    </Button>\n                </Form>\n                <h4>Last submitted move: {this.state.lastPlayedMove}</h4>\n                <h2>Previous Moves</h2>\n\t\t\t\t<Table style={{marginBottom: '50px'}}>\n                    <thead>\n                        <tr>\n                            <th>Move</th>\n                            <th>{this.state.username1}</th>\n                            <th>{this.state.username2 === \"\" ? 'Player 2' : this.state.username2}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </Table>\n                <div style={{margin: 'auto', width: '50%'}}>\n                    <Messages id={this.props.matchId} />\n                    <MessageForm match_id={this.props.matchId} user_id={this.props.userId} />\n                </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Show;\n","import React from 'react';\nimport \"./MatchTable.css\"\nimport Client from \"../../Clients/Client\";\nimport { Button, Table } from 'reactstrap'\nimport {\n  Redirect\n} from \"react-router-dom\";\n\nclass MatchTable extends React.Component{\n    constructor(props){\n            super(props)\n            this.state = {\n                matches: [],\n                users: new Map(),\n                redirect: false,\n                configurations: new Map()\n            }\n    }\n\n    componentDidMount() {\n        this.getMatches()\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeoutId);\n    }\n\n    getMatches = () => {\n        Client.matches()\n            .then(response => {\n                console.log(response);\n                const user_ids = []\n                const configuration_ids = [];\n                response.data.forEach(element => {\n                    configuration_ids.push(element.game_configuration_id);\n                    user_ids.push(element.user1_id)\n                    if(element.user2_id) {\n                        user_ids.push(element.user2_id)\n                    }\n                })\n                this.setState({ matches: response.data });\n                this.getUserNames(user_ids);\n                this.getConfigurations(configuration_ids);\n            })\n            .catch(console.log);\n        this.timeoutId = setTimeout(this.getMatches, 2000);\n    };\n\n    getUserNames = (user_ids) => {\n        user_ids.forEach(user_id => {\n            if (!(this.state.users.get(user_id))) {\n                Client.getUser(user_id)\n                    .then(response => {\n                        const { users } = this.state;\n                        console.log(response);\n                        users.set(user_id, response.data.name);\n                        this.setState({ users });\n                    })\n                    .catch(console.log);\n            }\n        });\n      };\n\n    getConfigurations = (configuration_ids) => {\n        configuration_ids.forEach(configuration_id => {\n            if (!(this.state.configurations.get(configuration_id))) {\n                Client.gameConfiguration(configuration_id)\n                    .then(response => {\n                        const { configurations } = this.state;\n                        console.log(response);\n                        configurations.set(configuration_id, response.data);\n                        this.setState({ configurations });\n                    })\n                    .catch(console.log);\n            }\n        });\n    }\n\n    onClick = (matchId) => {\n        this.props.updateCurrentMatch(matchId);\n        this.setState({ redirect: true });\n    };\n\n    render() {\n        const sortedMatches = this.state.matches.sort(function(a, b) {\n            let order = 1;\n            if (a.user2_id === null && b.user2_id !== null) {\n                order = -1;\n            } else if (a.user2_id !== null && b.user2_id === null ) {\n                order = 1;\n            }\n            return order;\n        });\n        const itemsMine = []\n        const itemsOther = []\n        for (const [index, value] of sortedMatches.entries()) {\n            const player1moves = value.input_set_1 ? value.input_set_1.trim().split(\" \") : [];\n            const player2moves = value.input_set_2 ? value.input_set_2.trim().split(\" \") : [];\n            const configuration = this.state.configurations.get(value.game_configuration_id);\n            if (configuration && !Client.isGameOver(player1moves, player2moves, configuration)) {\n                if(value.user1_id === this.props.userId || value.user2_id === this.props.userId){\n                    itemsMine.push(\n                        <tr key={index}>\n                            <td><Button className=\"button\" type=\"submit\" color=\"primary\" onClick={() => {this.onClick(value.id)}}>Resume</Button></td>\n                            <td>{this.state.users.get(value.user1_id)}</td>\n                            <td>{this.state.users.get(value.user2_id)}</td>\n                            <td>{configuration ? configuration.name : null}</td>\n                        </tr>\n                    )\n                } else {\n                    itemsOther.push(\n                        <tr key={index}>\n                            <td><Button className=\"button\" type=\"submit\" color=\"primary\" onClick={() => {this.onClick(value.id)}}>{value.user2_id ? 'Spectate' : 'Join'}</Button></td>\n                            <td>{this.state.users.get(value.user1_id)}</td>\n                            <td>{this.state.users.get(value.user2_id)}</td>\n                            <td>{configuration ? configuration.name : null}</td>\n                        </tr>\n                    )\n                }\n            }\n        }\n\n        return (\n            <div>\n                {this.state.redirect ? <Redirect to='/match' /> : null}\n                <h2>Your Current Matches</h2>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Join / Spectate</th>\n                            <th>Player 1</th>\n                            <th>Player 2</th>\n                            <th>Configuration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {itemsMine}\n                    </tbody>\n                </Table>\n                <h2>Other Current Matches</h2>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Join / Spectate</th>\n                            <th>Player 1</th>\n                            <th>Player 2</th>\n                            <th>Configuration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {itemsOther}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default MatchTable;\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport {\n    Link\n  } from \"react-router-dom\";\n\nimport MatchTable from \"./MatchTable/MatchTable\"\n\nclass Amalgamation extends React.Component {\n\n    render() {\n        return (\n            <>\n                <Button style={{marginBottom: '50px'}} type=\"submit\" color=\"primary\">\n                    <Link style={{color: 'white'}} to=\"/config_creator\">Create a Configuration</Link>\n                </Button>\n                <br />\n                <Button style={{marginBottom: '50px'}} type=\"submit\" color=\"primary\">\n                    <Link style={{color: 'white'}} to=\"/create\">Create a Match</Link>\n                </Button>\n                <MatchTable\n                    updateCurrentMatch={this.props.updateCurrentMatch} userId={this.props.userId}\n                />\n            </>\n        )\n    }\n}\n\nexport default Amalgamation;\n","import React from 'react';\nimport \"./Header.css\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n\n    render() {\n      return (\n        <div className=\"header\">\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand style={{fontSize: '40px'}}>\n                <Link style={{color: 'black'}} to=\"/login\">\n                    RockPaperBazooka\n                </Link>\n            </NavbarBrand>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                    <Link style={{fontSize: '24px', paddingRight: '50px'}}to=\"/matches\">Matches</Link>\n                </NavItem>\n                <NavItem>\n                    <Link style={{fontSize: '24px', paddingRight: '50px'}}to=\"/user\">User</Link>\n                </NavItem>\n              </Nav>\n          </Navbar>\n        </div>\n      );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameConfigurationForm from \"./Components/GameConfiguration/Form\";\nimport UserForm from \"./Components/User/Form\";\nimport User from \"./Components/User/Show\";\nimport MatchForm from \"./Components/Match/Form\";\nimport Match from \"./Components/Match/Show\";\nimport Amalgamation from \"./Components/Amalgamation\"\nimport Header from \"./Components/Header/Header\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          name: \"\",\n          id: 2,\n          currentMatchId: 3\n      };\n  }\n\n  updateName = (name, id) => {\n      this.setState({\n        name,\n        id\n      });\n  };\n\n  updateCurrentMatch = (matchId) => {\n      this.setState({ currentMatchId: matchId });\n  };\n\n  render() {\n      return (\n        <Router>\n            <div className=\"App\">\n                <Header />\n                <Switch>\n                    <Route path=\"/config_creator\">\n                        <GameConfigurationForm /> <br />\n                    </Route>\n                    <Route path=\"/create\">\n                        <MatchForm\n                            userId={this.state.id}\n                            updateCurrentMatch={this.updateCurrentMatch}\n                        />\n                    </Route>\n                    <Route path=\"/match\">\n                        <Match matchId={this.state.currentMatchId} userId={this.state.id} userName={this.state.name} />\n                    </Route>\n                    <Route path=\"/matches\">\n                        <Amalgamation updateCurrentMatch={this.updateCurrentMatch} userId={this.state.id}/>\n                    </Route>\n                    <Route path=\"/user\">\n                        <User user={{ name: this.state.name }} />\n                    </Route>\n                    <Route path=\"/\">\n                        <UserForm updateName={this.updateName} />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}